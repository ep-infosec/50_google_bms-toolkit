# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: DG | SQL to add standby logs
  set_fact:
    sql_for_dg:  |
      alter system set dg_broker_start = true sid='*';
      alter system set standby_file_management = auto sid='*';
      begin
      for c in (
        select bytes, thr, (max(cnt_log) - nvl(max(cnt_sby), 0)) diff from (
        select bytes, thread# thr, count(*) cnt_log, null cnt_sby from v\$log group by bytes, thread#
        union all
        select bytes, thread# thr, null cnt_log, count(*) cnt_sby from v\$standby_log group by bytes, thread#
        )
        group by bytes, thr
      ) loop
        for n in 1..c.diff + 1 loop
          execute immediate 'alter database add standby logfile thread '||c.thr||' size '||c.bytes;
        end loop;
      end loop;
      end;
      /
  tags: dg-create

- name: DG | Enable force logging, set DG parameters and create standby logs on primary
  # start DG broker
  # enable force logging
  # add +1 standby redo groups
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/sqlplus -s / as sysdba << EOF
    begin
    for c in (select force_logging from v\$database) loop
    if c.force_logging = 'NO' then
      execute immediate 'alter database force logging';
    end if;
    end loop;
    end;
    /
    {{ sql_for_dg }}
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  delegate_to: primary1
  become: yes
  become_user: "{{ oracle_user }}"
  register: db_change
  tags: dg-create

- name: DG | Set DG parameters and create standby logs on standby
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/sqlplus -s / as sysdba << EOF
    {{ sql_for_dg }}
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  become: yes
  become_user: "{{ oracle_user }}"
  register: db_change
  tags: dg-create

- name: DG | Script for DG setup
  template:
    src: dg-create.j2
    dest: "{{ oracle_home }}/dbs/create_dg_{{ db_name }}.cmd"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
  delegate_to: primary1
  become: yes
  become_user: "{{ oracle_user }}"
  tags: dg-create

- name: DG | Create DG configuration
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/dgmgrl / << EOF
    @{{ oracle_home }}/dbs/create_dg_{{ db_name }}.cmd
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  delegate_to: primary1
  become: yes
  become_user: "{{ oracle_user }}"
  register: dg_create
  tags: dg-create

- name: DG | DG creation output
  debug: var=dg_create.stdout_lines
  tags: dg-create

- name: DG | Wait for DG to be enabled
  command: "sleep 60"
  tags: dg-create

- name: DG | Show DG configuration
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/dgmgrl / << EOF
    show configuration verbose
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  become: yes
  become_user: "{{ oracle_user }}"
  register: dg_create
  tags: dg-create

- name: DG | DG verbose output
  debug: var=dg_create.stdout_lines
  tags: dg-create

- name: DG | Show standby database configuration
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/dgmgrl / << EOF
    show database verbose {{ db_name }}{{ standby_suffix }}
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  become: yes
  become_user: "{{ oracle_user }}"
  register: dg_standby
  tags: dg-create

- name: DG | Restart standby if required
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/sqlplus / as sysdba << EOF
    shutdown immediate
    startup mount
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  when: "'database instance restart required' in dg_standby.stdout"
  become: yes
  become_user: "{{ oracle_user }}"
  tags: dg-create

- name: DG | Enable standby database after restart to clear warnings
  shell: |
    set -o pipefail
    {{ oracle_home }}/bin/dgmgrl / << EOF
    enable database {{ db_name }}{{ standby_suffix }};
    show database verbose {{ db_name }}{{ standby_suffix }};
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  when: "'database instance restart required' in dg_standby.stdout"
  become: yes
  become_user: "{{ oracle_user }}"
  register: dg_standby
  tags: dg-create

- name: DG | Add Oracle Restart configuration
  shell: |
    set -o pipefail
    srvctl add db -d {{ db_name }}{{ standby_suffix }} \
    -oraclehome {{ oracle_home }} {{ "-domain " + db_domain | default(omit) }} \
    -spfile {{ oracle_home }}/dbs/spfile{{ db_name }}.ora \
    -pwfile {{ oracle_home }}/dbs/orapw{{ db_name }} \
    -role PHYSICAL_STANDBY -startoption MOUNT -stopoption IMMEDIATE \
    -instance {{ oracle_sid }} -dbname {{ db_name }}
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  become: yes
  become_user: "{{ oracle_user }}"
  register: db_config
  failed_when:
    - "(db_config.rc not in [2]) or ('already exists' not in db_config.stdout)"
    - db_config.rc not in [0]
  tags: dg-create
